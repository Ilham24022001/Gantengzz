
#!/bin/bash

# Global Variables
XRAY_LOG="/var/log/xray/access.log"
AUTH_LOG="/var/log/auth.log"
SECURE_LOG="/var/log/secure"
OVPN_TCP_LOG="/etc/openvpn/server/openvpn-tcp.log"
OVPN_UDP_LOG="/etc/openvpn/server/openvpn-udp.log"

# Color Palette with Gradient Effects
BG='\033[40m'  # Black background
RESET='\033[0m'

# Gradient Colors (Cyberpunk theme)
CYAN=('\033[38;5;45m' '\033[38;5;51m' '\033[38;5;87m')
PURPLE=('\033[38;5;129m' '\033[38;5;141m' '\033[38;5;153m')
PINK=('\033[38;5;199m' '\033[38;5;207m' '\033[38;5;213m')
GREEN=('\033[38;5;46m' '\033[38;5;48m' '\033[38;5;118m')

# Terminal Effects
BOLD='\033[1m'
DIM='\033[2m'
BLINK='\033[5m'

# Animation Functions
function animate_text {
    text=$1
    delay=0.05
    for (( i=0; i<${#text}; i++ )); do
        echo -ne "${PURPLE[$((i % 3))]}${text:$i:1}$RESET"
        sleep $delay
    done
}

function draw_rainbow_line {
    cols=$(tput cols)
    colors=("${CYAN[@]}" "${PURPLE[@]}" "${PINK[@]}" "${GREEN[@]}")
    for (( i=0; i<$cols; i++ )); do
        echo -ne "${colors[$((i % 12))]}═$RESET"
    done
    echo ""
}

# Header Design
function show_header {
    clear
    draw_rainbow_line
    echo -e "${BOLD}${PINK[0]}"
    echo -e " ${z}╭══════════════════════════════════════════════════════════╮${NC}"
    echo -e " ${z}│$NC${f}    WELCOME TO  AM GANTENG STORE AUTOSCRIPT PREMIUM      $NC${z}│$NC"
    echo -e " ${z}╰══════════════════════════════════════════════════════════╯${NC}$RESET"
    echo -e "${CYAN[0]}${BOLD}              REAL-TIME CONNECTION MONITORING DASHBOARD$RESET"
    draw_rainbow_line
    echo -e "${DIM}${PURPLE[1]}Press ${BOLD}CTRL+C${RESET}${DIM}${PURPLE[1]} to exit$RESET"
    draw_rainbow_line
}

# Table Designs
function xray_table {
    echo -e "${CYAN[0]}${BOLD}┌─────────────────────┬──────────────────┬──────────────────────────────┬─────────────────┐${RESET}"
    echo -e "${CYAN[0]}${BOLD}│${RESET} ${GREEN[0]}${BOLD}%-19s${RESET} ${CYAN[0]}${BOLD}│${RESET} ${GREEN[0]}${BOLD}%-16s${RESET} ${CYAN[0]}${BOLD}│${RESET} ${GREEN[0]}${BOLD}%-28s${RESET} ${CYAN[0]}${BOLD}│${RESET} ${GREEN[0]}${BOLD}%-15s${RESET} ${CYAN[0]}${BOLD}│${RESET}" "WAKTU" "IP ADDRESS" "DESTINATION" "USER"
    echo -e "${CYAN[0]}${BOLD}├─────────────────────┼──────────────────┼──────────────────────────────┼─────────────────┤${RESET}"
}

function ssh_table {
    echo -e "${PURPLE[0]}${BOLD}┌─────────────────────┬──────────────────┬──────────────────────────────┐${RESET}"
    echo -e "${PURPLE[0]}${BOLD}│${RESET} ${PINK[0]}${BOLD}%-19s${RESET} ${PURPLE[0]}${BOLD}│${RESET} ${PINK[0]}${BOLD}%-16s${RESET} ${PURPLE[0]}${BOLD}│${RESET} ${PINK[0]}${BOLD}%-28s${RESET} ${PURPLE[0]}${BOLD}│${RESET}" "ID" "USERNAME" "IP ADDRESS"
    echo -e "${PURPLE[0]}${BOLD}├─────────────────────┼──────────────────┼──────────────────────────────┤${RESET}"
}

function vpn_table {
    echo -e "${PINK[0]}${BOLD}┌─────────────────────┬──────────────────┬──────────────────────────────┐${RESET}"
    echo -e "${PINK[0]}${BOLD}│${RESET} ${CYAN[0]}${BOLD}%-19s${RESET} ${PINK[0]}${BOLD}│${RESET} ${CYAN[0]}${BOLD}%-16s${RESET} ${PINK[0]}${BOLD}│${RESET} ${CYAN[0]}${BOLD}%-28s${RESET} ${PINK[0]}${BOLD}│${RESET}" "USERNAME" "IP ADDRESS" "CONNECTED"
    echo -e "${PINK[0]}${BOLD}├─────────────────────┼──────────────────┼──────────────────────────────┤${RESET}"
}

# Main Monitoring Functions
function monitor_xray {
    echo -e "\n${BOLD}${CYAN[2]}🛰️  XRAY/TROJAN/VMESS CONNECTIONS${RESET}"
    xray_table

    tail -F "$XRAY_LOG" | while read line; do
        if echo "$line" | grep -q "email:"; then
            WAKTU=$(echo "$line" | awk '{print $1" "$2}')
            IP=$(echo "$line" | grep -oP 'from \K[0-9.]+')
            TUJUAN=$(echo "$line" | grep -oP 'accepted \K[a-z]+:[^ ]+')
            USER=$(echo "$line" | grep -oP 'email: \K\S+')

            echo -e "${CYAN[0]}${BOLD}│${RESET} ${GREEN[1]}%-19s${RESET} ${CYAN[0]}${BOLD}│${RESET} ${GREEN[1]}%-16s${RESET} ${CYAN[0]}${BOLD}│${RESET} ${GREEN[1]}%-28s${RESET} ${CYAN[0]}${BOLD}│${RESET} ${GREEN[1]}%-15s${RESET} ${CYAN[0]}${BOLD}│${RESET}" "$WAKTU" "$IP" "$TUJUAN" "$USER"
        fi
    done
}

function check_ssh {
    # Determine auth log location
    if [ -e "$AUTH_LOG" ]; then
        LOG="$AUTH_LOG"
    elif [ -e "$SECURE_LOG" ]; then
        LOG="$SECURE_LOG"
    else
        echo -e "${RED}No auth log found!${RESET}"
        return
    fi

    echo -e "\n${BOLD}${PURPLE[2]}🔑 SSH & DROPBEAR CONNECTIONS${RESET}"

    # Dropbear connections
    ssh_table
    data=( $(ps aux | grep -i dropbear | awk '{print $2}') )
    cat $LOG | grep -i dropbear | grep -i "Password auth succeeded" > /tmp/login-db.txt

    for PID in "${data[@]}"; do
        cat /tmp/login-db.txt | grep "dropbear\[$PID\]" > /tmp/login-db-pid.txt
        NUM=$(cat /tmp/login-db-pid.txt | wc -l)
        USER=$(cat /tmp/login-db-pid.txt | awk '{print $10}')
        IP=$(cat /tmp/login-db-pid.txt | awk '{print $12}')

        if [ $NUM -eq 1 ]; then
            echo -e "${PURPLE[0]}${BOLD}│${RESET} ${PINK[1]}%-19s${RESET} ${PURPLE[0]}${BOLD}│${RESET} ${PINK[1]}%-16s${RESET} ${PURPLE[0]}${BOLD}│${RESET} ${PINK[1]}%-28s${RESET} ${PURPLE[0]}${BOLD}│${RESET}" "$PID" "$USER" "$IP"
        fi
    done
    echo -e "${PURPLE[0]}${BOLD}└─────────────────────┴──────────────────┴──────────────────────────────┘${RESET}"

    # SSH connections
    ssh_table
    cat $LOG | grep -i sshd | grep -i "Accepted password for" > /tmp/login-db.txt
    data=( $(ps aux | grep "\[priv\]" | sort -k 72 | awk '{print $2}') )

    for PID in "${data[@]}"; do
        cat /tmp/login-db.txt | grep "sshd\[$PID\]" > /tmp/login-db-pid.txt
        NUM=$(cat /tmp/login-db-pid.txt | wc -l)
        USER=$(cat /tmp/login-db-pid.txt | awk '{print $9}')
        IP=$(cat /tmp/login-db-pid.txt | awk '{print $11}')

        if [ $NUM -eq 1 ]; then
            echo -e "${PURPLE[0]}${BOLD}│${RESET} ${PINK[1]}%-19s${RESET} ${PURPLE[0]}${BOLD}│${RESET} ${PINK[1]}%-16s${RESET} ${PURPLE[0]}${BOLD}│${RESET} ${PINK[1]}%-28s${RESET} ${PURPLE[0]}${BOLD}│${RESET}" "$PID" "$USER" "$IP"
        fi
    done
    echo -e "${PURPLE[0]}${BOLD}└─────────────────────┴──────────────────┴──────────────────────────────┘${RESET}"
}

function check_vpn {
    echo -e "\n${BOLD}${PINK[2]}🔒 VPN CONNECTIONS${RESET}"

    # TCP VPN
    if [ -f "$OVPN_TCP_LOG" ]; then
        vpn_table
        cat $OVPN_TCP_LOG | grep -w "^CLIENT_LIST" | cut -d ',' -f 2,3,8 | sed -e 's/,/      /g' | while read line; do
            USER=$(echo "$line" | awk '{print $1}')
            IP=$(echo "$line" | awk '{print $2}')
            CONNECTED=$(echo "$line" | awk '{print $3}')
            echo -e "${PINK[0]}${BOLD}│${RESET} ${CYAN[1]}%-19s${RESET} ${PINK[0]}${BOLD}│${RESET} ${CYAN[1]}%-16s${RESET} ${PINK[0]}${BOLD}│${RESET} ${CYAN[1]}%-28s${RESET} ${PINK[0]}${BOLD}│${RESET}" "$USER" "$IP" "$CONNECTED"
        done
        echo -e "${PINK[0]}${BOLD}└─────────────────────┴──────────────────┴──────────────────────────────┘${RESET}"
    fi

    # UDP VPN
    if [ -f "$OVPN_UDP_LOG" ]; then
        vpn_table
        cat $OVPN_UDP_LOG | grep -w "^CLIENT_LIST" | cut -d ',' -f 2,3,8 | sed -e 's/,/      /g' | while read line; do
            USER=$(echo "$line" | awk '{print $1}')
            IP=$(echo "$line" | awk '{print $2}')
            CONNECTED=$(echo "$line" | awk '{print $3}')
            echo -e "${PINK[0]}${BOLD}│${RESET} ${CYAN[1]}%-19s${RESET} ${PINK[0]}${BOLD}│${RESET} ${CYAN[1]}%-16s${RESET} ${PINK[0]}${BOLD}│${RESET} ${CYAN[1]}%-28s${RESET} ${PINK[0]}${BOLD}│${RESET}" "$USER" "$IP" "$CONNECTED"
        done
        echo -e "${PINK[0]}${BOLD}└─────────────────────┴──────────────────┴──────────────────────────────┘${RESET}"
    fi
}

# Main Execution
show_header
check_ssh
check_vpn
monitor_xray

# Footer
draw_rainbow_line
echo -e "${DIM}${CYAN[1]}Monitoring started at $(date)$RESET"
draw_rainbow_line
